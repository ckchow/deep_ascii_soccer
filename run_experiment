#!/usr/bin/env /usr/bin/python

import subprocess
import sys
import os
import argparse
import datetime
import time
import signal
import sys
import ntpath
import atexit

parser = argparse.ArgumentParser(description="deep soccer evaluator")
parser.add_argument("--glue_port", type=str, default="4096",
					help="rlglue port (default 4096)")
args = parser.parse_known_args()[0]
my_env = os.environ.copy()

my_env["RLGLUE_PORT"] = args.glue_port

time_dir = datetime.datetime.now().strftime("log_%Y%m%d(%H:%M:%S)")

try:
	os.makedirs(time_dir)
except os.error:
	print "directory already exists"

logfiles = []


	

def run(cmd, logdir, logfiles):
	global my_env
	fname = os.path.splitext(ntpath.basename(cmd))[0]

	print os.path.join("./", logdir, fname)

	logpath = os.path.abspath(os.path.join("./", logdir, fname+"_log"))
	errpath = os.path.abspath(os.path.join("./", logdir, fname+"_err"))


	logfile = open(logpath, "w")
	errfile = open(errpath, "w")
	logfiles.append(logfile)
	logfiles.append(errfile)
	p = subprocess.Popen(cmd, shell=False, universal_newlines=True, 
						 stdout=logfile, stderr=errfile, env=my_env)

	return p

p_core = run("rl_glue", time_dir, logfiles)
p_agent = run("./python/agent.py", time_dir, logfiles)
p_experiment = run("./python/experiment.py", time_dir, logfiles)
p_environment = run("./soccer", time_dir, logfiles)

def close(process):
	if process.poll():
		# None if the process is alive
		process.terminate()


@atexit.register
def cleanup():
	global logfiles, p_core, p_agent, p_experiment, p_environment
	print "program exiting"
	[l.flush() for l in logfiles]
	[close(p) for p in (p_core, p_agent, p_experiment, p_environment)]
	sys.exit(0)

def signal_handler(signal, frame):
	print "caught ctrl-c"
	cleanup()
	sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)



p_core.wait()